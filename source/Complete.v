
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Complete(

		//////////// CLOCK //////////
		input 	     ADC_CLK_10,
		input 	     MAX10_CLK1_50,
		input 	     MAX10_CLK2_50,

		//////////// SEG7 //////////
		output [7:0] HEX0,
		output [7:0] HEX1,
		output [7:0] HEX2,
		output [7:0] HEX3,
		output [7:0] HEX4,
		output [7:0] HEX5,

		//////////// KEY //////////
		input [1:0]  KEY,

		//////////// LED //////////
		output [9:0] LEDR,

		//////////// SW //////////
		input [9:0]  SW
		);



   //=======================================================
   //  REG/WIRE declarations
   //=======================================================

   // Block 1 outputs 0-5 for 
   // displays aL for LEDS
   wire [7:0] 		     a0;
   wire [7:0] 		     a1;
   wire [7:0] 		     a2;
   wire [7:0] 		     a3;
   wire [7:0] 		     a4;
   wire [7:0] 		     a5;
   wire [9:0] 		     aL;

   // Block 2 outputs 0-5 for 
   // displays bL for LEDS
   wire [7:0] 		     b0;
   wire [7:0] 		     b1;
   wire [7:0] 		     b2;
   wire [7:0] 		     b3;
   wire [7:0] 		     b4;
   wire [7:0] 		     b5;
   wire [9:0] 		     bL;

   // Block 3 outputs 0-5 for 
   // displays cL for LEDS
   wire [7:0] 		     c0;
   wire [7:0] 		     c1;
   wire [7:0] 		     c2;
   wire [7:0] 		     c3;
   wire [7:0] 		     c4;
   wire [7:0] 		     c5;
   wire [9:0] 		     cL;

   // Outputs by multiplexors
   // Passed to output ports of top level module
   wire [7:0] 		     out0;
   wire [7:0] 		     out1;
   wire [7:0] 		     out2;
   wire [7:0] 		     out3;
   wire [7:0] 		     out4;
   wire [7:0] 		     out5;
   wire [9:0] 		     outL;
   
   // Selector for mux's based off SW's 8 & 9
   wire [1:0] 		     sel;
   assign sel = SW[9:8];
   
   assign HEX0 = out0;
   assign HEX1 = out1;
   assign HEX2 = out2;
   assign HEX3 = out3;
   assign HEX4 = out4;
   assign HEX5 = out5;
   assign LEDR = outL;
   
   

   //=======================================================
   //  Structural coding
   //=======================================================
   

   //Block 1
   switch_led B1_0 (
		    .SW (SW),
		    .KEY (KEY),
		    .led (aL)
		    );

   birthdays B1_1 (
		   .KEY (KEY),
		   .HEX0 (a0),
		   .HEX1 (a1),
		   .HEX2 (a2),
		   .HEX3 (a3),
		   .HEX4 (a4),
		   .HEX5 (a5)
		   );
   

   //Block 2
   block2 B2 (
	.SW(SW),
	      .KEY (KEY),
		   .HEX0 (b0),
		   .HEX1 (b1),
		   .HEX2 (b2),
		   .HEX3 (b3),
		   .HEX4 (b4),
		   .HEX5 (b5),
	      .LEDR (bL)
	      );
   
   
   //Block 3
   compare B3(
	      .SW (SW),
	      .HEX0 (c0),
	      .HEX1 (c1),
	      .HEX2 (c2),
	      .HEX3 (c3),
	      .HEX4 (c4),
	      .HEX5 (c5),
	      .LEDR (cL)
      
	      );

   // Output Selection
   hex_mux H0(
	      .a (a0),
	      .b (b0),
	      .c (c0),
	      .sel(sel),
	      .out(out0)
	      );
   hex_mux H1(
	      .a (a1),
	      .b (b1),
	      .c (c1),
	      .sel(sel),
	      .out(out1)
	      );
   hex_mux H2(
	      .a (a2),
	      .b (b2),
	      .c (c2),
	      .sel(sel),
	      .out(out2)
	      );
   hex_mux H3(
	      .a (a3),
	      .b (b3),
	      .c (c3),
	      .sel(sel),
	      .out(out3)
	      );
   hex_mux H4(
	      .a (a4),
	      .b (b4),
	      .c (c4),
	      .sel(sel),
	      .out(out4)
	      );
   hex_mux H5(
	      .a (a5),
	      .b (b5),
	      .c (c5),
	      .sel(sel),
	      .out(out5)
	      );
   
   led_mux L0(
	      .a (aL),
	      .b (bL),
	      .c (cL),
	      .sel(sel),
	      .out(outL)
	      );
   
   
   
endmodule
